// Copyright 2025 Womanly Corp. All rights reserved.
// Use of this source code is governed by a license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.wromance.plugins.flutter_nav_mode

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object NavModeApiPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/**
 * {@template nav_bar_mode}
 * Represents the navigation bar mode on Android devices.
 *
 * Possible values:
 * - [threeButtons]: Traditional three-button navigation
 * - [twoButtons]: Two-button navigation (back + home)
 * - [gesture]: Full gesture navigation
 * - [unknown]: Navigation mode could not be determined
 * {@endtemplate}
 */
enum class NavBarMode(val raw: Int) {
  /** Traditional three-button navigation (back, home, recents) */
  THREE_BUTTONS(0),
  /** Two-button navigation with back and home buttons */
  TWO_BUTTONS(1),
  /** Full gesture navigation without buttons */
  GESTURE(2),
  /** Navigation mode could not be determined */
  UNKNOWN(3);

  companion object {
    fun ofRaw(raw: Int): NavBarMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
private open class NavModeApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          NavBarMode.ofRaw(it.toInt())
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NavBarMode -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * {@template nav_bar_api}
 * Platform API for accessing Android navigation bar mode.
 *
 * Usage:
 * ```dart
 * final mode = await NavBarApi().getNavBarMode();
 * print('Current navigation mode: $mode');
 * ```
 * {@endtemplate}
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface NavBarApi {
  /**
   * {@template get_nav_bar_mode}
   * Retrieves the current navigation bar mode from the Android system.
   *
   * Returns [NavBarMode] indicating the current navigation style.
   * May return [NavBarMode.unknown] if the mode cannot be determined.
   * {@endtemplate}
   */
  fun getNavBarMode(): NavBarMode

  companion object {
    /** The codec used by NavBarApi. */
    val codec: MessageCodec<Any?> by lazy {
      NavModeApiPigeonCodec()
    }
    /** Sets up an instance of `NavBarApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: NavBarApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_nav_mode.NavBarApi.getNavBarMode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getNavBarMode())
            } catch (exception: Throwable) {
              NavModeApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
